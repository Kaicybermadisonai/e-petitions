@use "sass:map";
@use "sass:math";
@use "sass:meta";

@use "../settings/typography" as *;
@use "./px-to-rem" as *;
@use "./media-query" as *;

@function line-height($line-height, $font-size) {
  @if not math.is-unitless($line-height) and math.unit($line-height) == math.unit($font-size) {
    $line-height: $line-height / $font-size;
  }

  @return $line-height;
}

@mixin font-size($size, $line-height: false, $important: false) {
  $font-map: map.get($typography-scale, $size);

  @if not $font-map {
    @error "Unknown font size `#{$size}` - expected a point from the type scale.";
  }

  @each $breakpoint, $breakpoint-map in $font-map {
    $font-size: map.get($breakpoint-map, "font-size");
    $font-size-rem: px-to-rem($font-size);

    $calculated-line-height: line-height(
      $line-height: if($line-height, $line-height, map.get($breakpoint-map, "line-height")),
      $font-size: $font-size
    );

    $font-size: $font-size if($important, !important, null);
    $font-size-rem: $font-size-rem if($important, !important, null);
    $calculated-line-height: $calculated-line-height if($important, !important, null);

    @if not $breakpoint {
      font-size: $font-size-rem;
      line-height: $calculated-line-height;
    } @else if $breakpoint == "print" {
      @include media-query($media-type: print) {
        font-size: $font-size;
        line-height: $calculated-line-height;
      }
    } @else {
      @include media-query($from: $breakpoint) {
        font-size: $font-size-rem;
        line-height: $calculated-line-height;
      }
    }
  }
}

%h1 {
  @include font-size(44);
  margin-top: 0;
  margin-bottom: 26px;
}

%h2 {
  @include font-size(33);
  margin-top: 30px;
  margin-bottom: 18px;
}

%h3 {
  @include font-size(27);
  margin-top: 30px;
  margin-bottom: 12px;
}

%h4 {
  @include font-size(22);
  margin-top: 30px;
  margin-bottom: 6px;
}

%h5 {
  @include font-size(20);
  margin-top: 25px;
  margin-bottom: 3px;
}

%h6 {
  @include font-size(16);
  margin-top: 20px;
  margin-bottom: 2px;
}

